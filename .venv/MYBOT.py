import logging
import sqlite3
from contextlib import closing
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from datetime import datetime, time, timedelta
import pytz
import re
from dateutil.relativedelta import relativedelta
import calendar
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7088016072:AAGXB3VzWWJdiTcrHfLn-kMoudu72RGst8M"
UK_LIST = [f"–£–ö{i}" for i in range(1, 15)]  # –£–ö1 - –£–ö14
TIMEZONE = pytz.timezone('Europe/Moscow')
DAILY_REPORT_TIME = time(19, 0, 0, tzinfo=TIMEZONE)  # 19:00 –ø–æ –ú—Å–∫
MONTHLY_REPORT_TIME = time(20, 0, 0, tzinfo=TIMEZONE)  # 20:00 –ø–æ –ú—Å–∫
DATABASE_NAME = "smp_bot.db"
REGISTERED_GROUPS_FILE = "registered_groups.txt"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        with closing(conn.cursor()) as cursor:
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                         CREATE TABLE IF NOT EXISTS daily_calls (
                             date TEXT NOT NULL,
                             uk TEXT NOT NULL,
                             count INTEGER DEFAULT 0,
                             PRIMARY KEY (date, uk)
                         )
                     ''')

            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                         CREATE TABLE IF NOT EXISTS monthly_calls (
                             month TEXT NOT NULL,
                             uk TEXT NOT NULL,
                             count INTEGER DEFAULT 0,
                             PRIMARY KEY (month, uk)
                         )
                     ''')

            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
            cursor.execute('''
                         CREATE TABLE IF NOT EXISTS registered_groups (
                             chat_id TEXT PRIMARY KEY
                         )
                     ''')

            conn.commit()


def save_registered_groups(groups):
    try:
        with open(REGISTERED_GROUPS_FILE, 'w') as f:
            for chat_id in groups:
                f.write(f"{chat_id}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")


def load_registered_groups():
    groups = set()
    try:
        if os.path.exists(REGISTERED_GROUPS_FILE):
            with open(REGISTERED_GROUPS_FILE, 'r') as f:
                for line in f:
                    groups.add(line.strip())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: {e}")
    return groups


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def register_call(uk: str):
    now = datetime.now(TIMEZONE)
    date_str = now.strftime("%Y-%m-%d")
    month_str = now.strftime("%Y-%m")

    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        with closing(conn.cursor()) as cursor:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                         INSERT INTO daily_calls (date, uk, count)
                         VALUES (?, ?, 1)
                         ON CONFLICT(date, uk) DO UPDATE SET count = count + 1
                     ''', (date_str, uk))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                         INSERT INTO monthly_calls (month, uk, count)
                         VALUES (?, ?, 1)
                         ON CONFLICT(month, uk) DO UPDATE SET count = count + 1
                     ''', (month_str, uk))

            conn.commit()


def get_daily_data(date: str = None):
    if not date:
        date = datetime.now(TIMEZONE).strftime("%Y-%m-%d")

    data = {}
    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        with closing(conn.cursor()) as cursor:
            cursor.execute('''
                         SELECT uk, count FROM daily_calls
                         WHERE date = ?
                     ''', (date,))

            for row in cursor.fetchall():
                uk, count = row
                data[uk] = count

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –£–ö
    for uk in UK_LIST:
        if uk not in data:
            data[uk] = 0

    return data


def get_monthly_data(month: str = None):
    if not month:
        month = datetime.now(TIMEZONE).strftime("%Y-%m")

    data = {}
    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        with closing(conn.cursor()) as cursor:
            cursor.execute('''
                         SELECT uk, count FROM monthly_calls
                         WHERE month = ?
                     ''', (month,))

            for row in cursor.fetchall():
                uk, count = row
                data[uk] = count

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –£–ö
    for uk in UK_LIST:
        if uk not in data:
            data[uk] = 0

    return data


def add_test_data():
    now = datetime.now(TIMEZONE)
    date_str = now.strftime("%Y-%m-%d")
    month_str = now.strftime("%Y-%m")

    test_calls = {
        "–£–ö1": 3,
        "–£–ö5": 2,
        "–£–ö10": 1,
        "–£–ö13": 4
    }

    with closing(sqlite3.connect(DATABASE_NAME)) as conn:
        with closing(conn.cursor()) as cursor:
            for uk, count in test_calls.items():
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('''
                             INSERT INTO daily_calls (date, uk, count)
                             VALUES (?, ?, ?)
                             ON CONFLICT(date, uk) DO UPDATE SET count = count + ?
                         ''', (date_str, uk, count, count))

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('''
                             INSERT INTO monthly_calls (month, uk, count)
                             VALUES (?, ?, ?)
                             ON CONFLICT(month, uk) DO UPDATE SET count = count + ?
                         ''', (month_str, uk, count, count))

            conn.commit()

    return test_calls


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üöë –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤ –°–ú–ü!\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—á–µ–±–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´–£–ö1¬ª –∏–ª–∏ ¬´–í—ã–∑–æ–≤ –∏–∑ –£–ö3¬ª\n"
        "- –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: ¬´–£–ö5¬ª\n\n"
        "–û—Ç—á–µ—Ç—ã:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π - –±—É–¥–Ω–∏ –≤ 19:00\n"
        "‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 20:00\n\n"
        "–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/daily_report - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏\n"
        "/monthly_report - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–π —Å–≤–æ–¥–∫–∏\n"
        "/add_test_data - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
    )


def extract_uk(text: str) -> str | None:
    try:
        text_lower = text.lower()
        matches = re.findall(r"(—É–∫|uk)[\s\-_]*(\d{1,2})\b", text_lower)

        if matches:
            uk_prefix, uk_num = matches[0]
            try:
                num = int(uk_num)
                if 1 <= num <= 14:
                    return f"–£–ö{num}"
            except ValueError:
                pass

        match = re.search(r"\b(—É–∫|uk)(\d{1,2})\b", text_lower)
        if match:
            try:
                num = int(match.group(2))
                if 1 <= num <= 14:
                    return f"–£–ö{num}"
            except ValueError:
                pass

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ extract_uk: {e}", exc_info=True)
        return None


async def handle_call(update: Update, uk: str, source: str = "—Ç–µ–∫—Å—Ç") -> None:
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –≤ –ë–î
        register_call(uk)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        now = datetime.now(TIMEZONE)
        date_str = now.strftime("%d.%m.%Y")
        month_str = now.strftime("%B %Y").lower()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        daily_data = get_daily_data()
        monthly_data = get_monthly_data()

        response = (
            f"üöë <b>–í—ã–∑–æ–≤ –°–ú–ü –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n"
            f"‚Ä¢ –£—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å: <b>{uk}</b>\n"
            f"‚Ä¢ –î–∞—Ç–∞: {date_str}\n"
            f"‚Ä¢ –í—ã–∑–æ–≤–æ–≤ –∏–∑ {uk} —Å–µ–≥–æ–¥–Ω—è: <b>{daily_data[uk]}</b>\n"
            f"‚Ä¢ –í—ã–∑–æ–≤–æ–≤ –∏–∑ {uk} –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <b>{monthly_data[uk]}</b>"
        )

        await update.message.reply_text(response, parse_mode='HTML')
        logger.info(f"–í—ã–∑–æ–≤ –∏–∑ {uk} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        text = update.message.text
        if not text:
            return

        uk = extract_uk(text)
        if not uk:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ –£–ö1\n‚Ä¢ –í—ã–∑–æ–≤ –∏–∑ –£–ö3\n‚Ä¢ UK5"
            )
            return

        if uk not in UK_LIST:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –£–ö: '{uk}'! –î–æ–ø—É—Å—Ç–∏–º—ã –Ω–æ–º–µ—Ä–∞ 1-14"
            )
            return

        await handle_call(update, uk, "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def handle_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message.caption:
            return

        caption = update.message.caption
        uk = extract_uk(caption)

        if not uk:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –£–ö –≤ –ø–æ–¥–ø–∏—Å–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ –£–ö1\n‚Ä¢ –í—ã–∑–æ–≤ –∏–∑ –£–ö3\n‚Ä¢ UK5"
            )
            return

        if uk not in UK_LIST:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –£–ö: '{uk}'! –î–æ–ø—É—Å—Ç–∏–º—ã –Ω–æ–º–µ—Ä–∞ 1-14"
            )
            return

        await handle_call(update, uk, "—Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ")


def generate_daily_report(date: str = None) -> str:
    if not date:
        date = datetime.now(TIMEZONE).strftime("%Y-%m-%d")

    daily_data = get_daily_data(date)
    report_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")

    report_lines = [
        f"üìä <b>–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –°–ú–ü –∑–∞ {report_date}:</b>"
    ]

    total = 0
    for uk in UK_LIST:
        count = daily_data.get(uk, 0)
        if count > 0:
            report_lines.append(f"  - {uk}: üöë {count} –≤—ã–∑–æ–≤(–æ–≤)")
            total += count

    if total > 0:
        report_lines.append(f"\nüöë –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: <b>{total}</b>")
    else:
        report_lines.append("\n‚ÑπÔ∏è –í—ã–∑–æ–≤–æ–≤ –Ω–µ –±—ã–ª–æ")

    return "\n".join(report_lines)


def generate_monthly_report(month: str = None) -> str:
    if not month:
        month = datetime.now(TIMEZONE).strftime("%Y-%m")

    monthly_data = get_monthly_data(month)
    report_month = datetime.strptime(month + "-01", "%Y-%m-%d").strftime("%B %Y").lower()

    report_lines = [
        f"üìà <b>–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –°–ú–ü –∑–∞ {report_month}:</b>"
    ]

    total = 0
    for uk in UK_LIST:
        count = monthly_data.get(uk, 0)
        if count > 0:
            report_lines.append(f"  - {uk}: üöë {count} –≤—ã–∑–æ–≤(–æ–≤)")
            total += count

    if total > 0:
        report_lines.append(f"\nüöë –í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü: <b>{total}</b>")
    else:
        report_lines.append("\n‚ÑπÔ∏è –í—ã–∑–æ–≤–æ–≤ –Ω–µ –±—ã–ª–æ")

    return "\n".join(report_lines)


async def send_daily_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        now = datetime.now(TIMEZONE)
        if now.weekday() > 4:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            return

        report = generate_daily_report()
        registered_groups = load_registered_groups()

        for chat_id in registered_groups:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=report,
                    parse_mode='HTML'
                )
                logger.info(f"–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)


def get_last_weekday_of_month(year: int, month: int) -> datetime:
    last_day = calendar.monthrange(year, month)[1]
    date = datetime(year, month, last_day, tzinfo=TIMEZONE)

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—è—Ç–Ω–∏—Ü—É
    while date.weekday() != 4:  # 4 = –ø—è—Ç–Ω–∏—Ü–∞
        date -= timedelta(days=1)
    return date


async def send_monthly_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        report = generate_monthly_report()
        registered_groups = load_registered_groups()

        for chat_id in registered_groups:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=report,
                    parse_mode='HTML'
                )
                logger.info(f"–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)


async def daily_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        report = generate_daily_report()
        await update.message.reply_text(report, parse_mode='HTML')
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")


async def monthly_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        report = generate_monthly_report()
        await update.message.reply_text(report, parse_mode='HTML')
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")


async def add_test_data_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        test_calls = add_test_data()
        response = (
                "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã:</b>\n" +
                "\n".join([f"- {uk}: {count} –≤—ã–∑–æ–≤–æ–≤" for uk, count in test_calls.items()]) +
                "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/daily_report - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç\n/monthly_report - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"
        )

        await update.message.reply_text(response, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.message.chat.id)
    registered_groups = load_registered_groups()

    if chat_id not in registered_groups:
        registered_groups.add(chat_id)
        save_registered_groups(registered_groups)

        await update.message.reply_text(
            "‚úÖ <b>–ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å:\n"
            "- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 19:00 –ø–æ –±—É–¥–Ω—è–º\n"
            "- –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 20:00\n\n"
            "<b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/daily_report - –¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n"
            "/monthly_report - –º–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞\n"
            "/add_test_data - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "<b>–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "- –¢–µ–∫—Å—Ç: ¬´–£–ö5¬ª –∏–ª–∏ ¬´–í—ã–∑–æ–≤ –∏–∑ –£–ö3¬ª\n"
            "- –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é",
            parse_mode='HTML'
        )
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {chat_id}")
    else:
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        await update.message.reply_text("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}', exc_info=True)
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def schedule_monthly_report(job_queue):
    now = datetime.now(TIMEZONE)
    last_weekday = get_last_weekday_of_month(now.year, now.month)

    if last_weekday < now:
        next_month = now + relativedelta(months=1)
        last_weekday = get_last_weekday_of_month(next_month.year, next_month.month)

    report_time = last_weekday.replace(
        hour=MONTHLY_REPORT_TIME.hour,
        minute=MONTHLY_REPORT_TIME.minute,
        second=0,
        microsecond=0
    )

    job_queue.run_once(send_monthly_report, when=report_time)
    logger.info(f"–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {report_time.strftime('%d.%m.%Y %H:%M')}")


def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –°–æ–∑–¥–∞–Ω–∏–µ Application
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("daily_report", daily_report),
        CommandHandler("monthly_report", monthly_report),
        CommandHandler("add_test_data", add_test_data_cmd),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
        MessageHandler(filters.PHOTO & filters.CAPTION, handle_photo_with_caption),
        MessageHandler(filters.ChatType.GROUPS | filters.ChatType.SUPERGROUP, register_group)
    ]

    for handler in handlers:
        application.add_handler(handler)

    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    if application.job_queue:
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        application.job_queue.run_daily(
            send_daily_report,
            time=DAILY_REPORT_TIME,
            days=tuple(range(5))  # –ü–Ω-–ü—Ç
        )

        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        schedule_monthly_report(application.job_queue)

        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        application.job_queue.run_once(
            lambda ctx: schedule_monthly_report(application.job_queue),
            when=timedelta(days=30)
        )
    else:
        logger.error("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –û—Ç—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()


if __name__ == '__main__':
    main()
