import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)–π–π
from datetime import datetime, time
import pytz
import re
import os
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

UK_LIST = [f"–£–ö{i}" for i in range(1, 15)]  # –£–ö1 - –£–ö14
TIMEZONE = pytz.timezone('Europe/Moscow')
DAILY_REPORT_TIME = time(19, 0, 0, tzinfo=TIMEZONE)  # 19:00 –ø–æ –ú—Å–∫

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
daily_counts = {}
registered_groups = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "üöë –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤ –°–ú–ü!\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—á–µ–±–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´–£–ö1¬ª –∏–ª–∏ ¬´–í—ã–∑–æ–≤ –∏–∑ –£–ö3¬ª\n"
        "- –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: ¬´–£–ö5¬ª\n\n"
        "–ö–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –≤ 19:00 –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∫–æ—Ä–ø—É—Å–∞–º.\n"
        "–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/test_report - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ (–∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö)\n"
        "/add_test_data - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
    )


def extract_uk(text: str) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –£–ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        text_lower = text.lower()

        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –£–ö –≤ —Ç–µ–∫—Å—Ç–µ
        matches = re.findall(r"(—É–∫|uk)[\s\-_]*(\d{1,2})\b", text_lower)

        if matches:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –£–ö
            uk_prefix, uk_num = matches[0]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä (—É–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –Ω—É–ª–∏)
            try:
                num = int(uk_num)
                if 1 <= num <= 14:
                    return f"–£–ö{num}"
            except ValueError:
                pass

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        match = re.search(r"\b(—É–∫|uk)(\d{1,2})\b", text_lower)
        if match:
            try:
                num = int(match.group(2))
                if 1 <= num <= 14:
                    return f"–£–ö{num}"
            except ValueError:
                pass

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ extract_uk: {e}", exc_info=True)
        return None


async def register_call(update: Update, uk: str, source: str = "—Ç–µ–∫—Å—Ç") -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –£–ö —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        now = datetime.now(TIMEZONE)
        today = now.strftime("%Y-%m-%d")
        weekday = now.weekday()
        day_name = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][weekday]
        date_str = now.strftime('%d.%m.%Y')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–Ω—è
        if today not in daily_counts:
            daily_counts[today] = {building: 0 for building in UK_LIST}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –£–ö
        if uk not in UK_LIST:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –£–ö '{uk}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(UK_LIST)}"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        daily_counts[today][uk] += 1
        current_count = daily_counts[today][uk]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        response = (
            f"üöë <b>–í—ã–∑–æ–≤ –°–ú–ü –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"‚Ä¢ –£—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å: <b>{uk}</b>\n"
            f"‚Ä¢ –î–∞—Ç–∞ –≤—ã–∑–æ–≤–∞: {date_str} ({day_name})\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ –∏–∑ {uk} –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{current_count}</b>\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–∑–æ–≤–æ–≤
        total_today = sum(daily_counts[today].values())
        response += f"üìä <i>–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_today}</i>"

        await update.message.reply_text(response, parse_mode='HTML')
        logger.info(f"–í—ã–∑–æ–≤ –∏–∑ {uk} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å—Ç–æ—á–Ω–∏–∫: {source}. –í—Å–µ–≥–æ: {current_count}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –£–ö"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_type = update.message.chat.type
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ —Ç–∏–ø–∞: {chat_type}")

        text = update.message.text
        if not text:
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        uk = extract_uk(text)

        if not uk:
            logger.info(f"–£–ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{text}'")
            # –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ –£–ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ –£–ö1\n‚Ä¢ –í—ã–∑–æ–≤ –∏–∑ –£–ö3\n‚Ä¢ UK5"
            )
            return

        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –£–ö: {uk}")

        if uk not in UK_LIST:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –£–ö: '{uk}'! –î–æ–ø—É—Å—Ç–∏–º—ã –Ω–æ–º–µ—Ä–∞ 1-14\n"
                f"–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: ¬´–£–ö7¬ª"
            )
            return

        await register_call(update, uk, "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def handle_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_type = update.message.chat.type
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —á–∞—Ç–µ —Ç–∏–ø–∞: {chat_type}")

        if not update.message.caption:
            logger.info("–§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return

        caption = update.message.caption
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: {caption}")

        uk = extract_uk(caption)

        if not uk:
            logger.info(f"–£–ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏: '{caption}'")
            # –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ –£–ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ –£–ö1\n‚Ä¢ –í—ã–∑–æ–≤ –∏–∑ –£–ö3\n‚Ä¢ UK5"
            )
            return

        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –£–ö –∏–∑ –ø–æ–¥–ø–∏—Å–∏: {uk}")

        if uk not in UK_LIST:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –£–ö: '{uk}'! –î–æ–ø—É—Å—Ç–∏–º—ã –Ω–æ–º–µ—Ä–∞ 1-14\n"
                f"–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: ¬´–£–ö7¬ª"
            )
            return

        await register_call(update, uk, "—Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ")


def generate_report() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    now = datetime.now(TIMEZONE)
    today = now.strftime("%Y-%m-%d")
    weekday = now.weekday()
    day_name = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][weekday]
    date_str = now.strftime('%d.%m.%Y')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_lines = [
        f"üìä <b>–°–≤–æ–¥–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –°–ú–ü –∑–∞ {date_str} ({day_name}):</b>"
    ]

    if today in daily_counts:
        total_calls = sum(daily_counts[today].values())
        report_lines.append(f"\nüöë –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ –∑–∞ –¥–µ–Ω—å: <b>{total_calls}</b>\n")

        for uk in UK_LIST:
            count = daily_counts[today].get(uk, 0)
            if count > 0:
                report_lines.append(f"  - {uk}: üöë {count} –≤—ã–∑–æ–≤(–æ–≤)")
            else:
                report_lines.append(f"  - {uk}: ‚úÖ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ –±—ã–ª–æ")
    else:
        report_lines.append("\n‚ÑπÔ∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–∑–æ–≤–æ–≤")
        for uk in UK_LIST:
            report_lines.append(f"  - {uk}: ‚úÖ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ –±—ã–ª–æ")

    return "\n".join(report_lines)


def reset_daily_counters():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    if today in daily_counts:
        del daily_counts[today]
        logger.info(f"–°—á–µ—Ç—á–∏–∫–∏ –∑–∞ {today} —Å–±—Ä–æ—à–µ–Ω—ã")


async def send_daily_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        now = datetime.now(TIMEZONE)
        today = now.strftime("%Y-%m-%d")
        weekday = now.weekday()

        # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏ (0-4 = –ü–Ω-–ü—Ç)
        if weekday > 4:
            logger.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –æ—Ç—á–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return

        report = generate_report()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        failed_chats = []
        for chat_id in registered_groups.copy():
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=report,
                    parse_mode='HTML'
                )
                logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                failed_chats.append(chat_id)

        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            registered_groups.discard(chat_id)
            logger.warning(f"–ì—Ä—É–ø–ø–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É
        if today in daily_counts and registered_groups:
            reset_daily_counters()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)


async def test_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    try:
        report = generate_report()
        await update.message.reply_text(report, parse_mode='HTML')
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        reset_daily_counters()
        await update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")


async def add_test_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        now = datetime.now(TIMEZONE)
        today = now.strftime("%Y-%m-%d")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–Ω—è
        if today not in daily_counts:
            daily_counts[today] = {uk: 0 for uk in UK_LIST}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
        daily_counts[today]["–£–ö1"] = 3
        daily_counts[today]["–£–ö5"] = 2
        daily_counts[today]["–£–ö10"] = 1

        await update.message.reply_text(
            "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã:</b>\n"
            "- –£–ö1: 3 –≤—ã–∑–æ–≤–∞\n"
            "- –£–ö5: 2 –≤—ã–∑–æ–≤–∞\n"
            "- –£–ö10: 1 –≤—ã–∑–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_report –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–¥–∫–∏ –∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö",
            parse_mode='HTML'
        )
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    chat_id = update.message.chat.id
    chat_type = update.message.chat.type

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞: ID={chat_id}, —Ç–∏–ø={chat_type}")

    if chat_id not in registered_groups:
        registered_groups.add(chat_id)
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: ID={chat_id}, —Ç–∏–ø={chat_type}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        if chat_type in ["group", "supergroup"]:
            await update.message.reply_text(
                "‚úÖ <b>–ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 19:00 –ø–æ –±—É–¥–Ω—è–º.\n\n"
                "<b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/test_report - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ (–∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö)\n"
                "/add_test_data - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                "<b>–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "- –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ ¬´–£–ö5¬ª\n"
                "- –ò–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ¬´–í—ã–∑–æ–≤ –∏–∑ –£–ö3¬ª",
                parse_mode='HTML'
            )
    else:
        logger.info(f"–ß–∞—Ç {chat_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}', exc_info=True)

    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_report", test_report))
    application.add_handler(CommandHandler("add_test_data", add_test_data))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO & filters.CAPTION, handle_photo_with_caption))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS | filters.ChatType.SUPERGROUP,
        register_group
    ))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (–µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω)
    if application.job_queue:
        application.job_queue.run_daily(
            send_daily_report,
            time=DAILY_REPORT_TIME,
            days=tuple(range(5))  # –ü–Ω-–ü—Ç (0-4)
        )
        logger.info("JobQueue –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    else:
        logger.error("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()


if __name__ == '__main__':
    main()